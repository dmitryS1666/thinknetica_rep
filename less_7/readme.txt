Для пассажирских вагонов:
    + Добавить атрибут общего кол-ва мест (задается при создании вагона)
    + Добавить метод, который "занимает места" в вагоне (по одному за раз)
    + Добавить метод, который возвращает кол-во занятых мест в вагоне
    + Добавить метод, возвращающий кол-во свободных мест в вагоне.

Для грузовых вагонов:
    + Добавить атрибут общего объема (задается при создании вагона)
    + Добавить метод, которые "занимает объем" в вагоне (объем указывается в качестве параметра метода)
    + Добавить метод, который возвращает занятый объем
    + Добавить метод, который возвращает оставшийся (доступный) объем

У класса Station:
    + написать метод, который принимает блок и проходит по всем поездам на станции, передавая каждый поезд в блок.

У класса Train:
    + написать метод, который принимает блок и проходит по всем вагонам поезда (вагоны должны быть во внутреннем массиве),
      передавая каждый объект вагона в блок.

Добавить возможности:
    + При создании вагона указывать кол-во мест или общий объем, в зависимости от типа вагона

    + Выводить список вагонов у поезда (в указанном выше формате), используя созданные методы
        - Номер вагона (можно назначать автоматически), тип вагона, кол-во свободных и занятых мест (для пассажирского вагона)
        или кол-во свободного и занятого объема (для грузовых вагонов).

    + Выводить список поездов на станции (в указанном выше формате), используя созданные методы
        - Номер поезда, тип, кол-во вагонов

    + Занимать место или объем в вагоне



/*lesson_9*/

Написать модуль Accessors, содержащий следующие методы, которые можно вызывать на уровне класса:

    + метод attr_accessor_with_history

        Этот метод динамически создает геттеры и сеттеры для любого кол-ва атрибутов,
        при этом сеттер сохраняет все значения инстанс-переменной при изменении этого значения.

    + Также в класс, в который подключается модуль должен добавляться инстанс-метод <имя_атрибута>_history
        который возвращает массив всех значений данной переменной.

    метод strong_attr_accessor
        который принимает имя атрибута и его класс.
        При этом создается геттер и сеттер для одноименной инстанс-переменной,
        но сеттер проверяет тип присваемоего значения.
        Если тип отличается от того, который указан вторым параметром,
        то выбрасывается исключение.
        Если тип совпадает, то значение присваивается.

Написать модуль Validation, который:

    Содержит метод класса validate.
    Этот метод принимает в качестве параметров имя проверяемого атрибута, а также
    тип валидации и при необходимости дополнительные параметры.
    Возможные типы валидаций:

    - presence - требует, чтобы значение атрибута было не nil и не пустой строкой.
    Пример:
    validate :name, :presence

    - format (при этом отдельным параметром задается регулярное выражение для формата).
    Треубет соответствия
    значения атрибута заданному регулярному выражению.
    Пример:
    validate :number, :format, /A-Z{0,3}/


    - type (третий параметр - класс атрибута). Требует соответствия значения атрибута заданному классу.
    Пример:
    validate :station, :type, RailwayStation

Содержит инстанс-метод validate!, который запускает все проверки (валидации), указанные в классе
через метод класса validate.

В случае ошибки валидации выбрасывает исключение с сообщением о том, какая именно валидация не прошла
Содержит инстанс-метод valid? который возвращает true, если все проверки валидации прошли успешно
и false, если есть ошибки валидации.

К любому атрибуту можно применить несколько разных валидаторов, например
    validate :name, :presence
    validate :name, :format, /A-Z/
    validate :name, :type, String
     Все указанные валидаторы должны применяться к атрибуту
    Допустимо, что модуль не будет работать с наследниками.

Подключить эти модули в свои классы и продемонстрировать их использование.
Валидации заменить на методы из модуля Validation.